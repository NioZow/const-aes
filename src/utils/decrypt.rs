use crate::utils::{add_round_key, gf_multiply, SBOX};

pub const fn sub_bytes_rev(block: &mut [u8; 16], rsbox: &[u8; 256]) {
    let mut i: u8 = 0;

    while i < 16 {
        block[i as usize] = rsbox[block[i as usize] as usize];
        i += 1;
    }
}

/// in order to make the lib as tiny as possible the RSBOX is calculated from the SBOX
/// However is that function not more than 256 bytes?
pub const fn calculate_rsbox() -> [u8; 256] {
    let mut rsbox = [0u8; 256];

    let mut i: u16 = 0;

    //
    // loop over all bytes
    //
    while i < 256 {

        let mut j: u16 = 0;

        //
        // search for the byte in the sbox
        //
        while j < 256 {

            if SBOX[j as usize] == i as u8 {
                rsbox[i as usize] = j as u8;
                break;
            }

            j += 1;
        }

        i += 1;
    }

    rsbox
}

pub const fn shift_rows_rev(block: &mut [u8; 16]) {
    let temp = *block;

    let mut row = 1;

    while row < 4 {
        let mut col = 0;

        while col < 4 {
            // The only difference from shift_rows is the direction of shift
            // Instead of (col + row) we do (col + 4 - row) to shift right
            block[row + 4 * col] = temp[row + 4 * ((col + 4 - row) % 4)];
            col += 1;
        }

        row += 1;
    }
}

pub const fn mix_columns_rev(block: &mut [u8; 16]) {
    let temp = *block;

    let mut col = 0;

    while col < 4 {
        let i = col * 4;

        // Inverse matrix multiplication for each column
        // Uses different coefficients: 0x0E, 0x0B, 0x0D, 0x09
        block[i] = gf_multiply(0x0E, temp[i]) ^
            gf_multiply(0x0B, temp[i + 1]) ^
            gf_multiply(0x0D, temp[i + 2]) ^
            gf_multiply(0x09, temp[i + 3]);

        block[i + 1] = gf_multiply(0x09, temp[i]) ^
            gf_multiply(0x0E, temp[i + 1]) ^
            gf_multiply(0x0B, temp[i + 2]) ^
            gf_multiply(0x0D, temp[i + 3]);

        block[i + 2] = gf_multiply(0x0D, temp[i]) ^
            gf_multiply(0x09, temp[i + 1]) ^
            gf_multiply(0x0E, temp[i + 2]) ^
            gf_multiply(0x0B, temp[i + 3]);

        block[i + 3] = gf_multiply(0x0B, temp[i]) ^
            gf_multiply(0x0D, temp[i + 1]) ^
            gf_multiply(0x09, temp[i + 2]) ^
            gf_multiply(0x0E, temp[i + 3]);

        col += 1;
    }
}

pub fn remove_pkcs7_padding<const CIPHER_LENGTH: usize>(plain: &[u8; CIPHER_LENGTH]) -> Vec<u8> {
    //
    // get the padding length by reading the last byte
    //
    let padding = plain[CIPHER_LENGTH - 1] as usize;

    plain[..CIPHER_LENGTH - padding].to_vec()
}

pub const fn decrypt_block(block: &[u8; 16], keys: &[[u8; 16]; 11]) -> [u8; 16] {
    let mut decrypted = *block;

    let rsbox: [u8; 256] = calculate_rsbox();

    //
    // initial round
    //
    add_round_key(&mut decrypted, &keys[10]);
    shift_rows_rev(&mut decrypted);
    sub_bytes_rev(&mut decrypted, &rsbox);

    //
    // main rounds
    //
    let mut i = 9;
    while i > 0 {
        add_round_key(&mut decrypted, &keys[i]);
        mix_columns_rev(&mut decrypted);
        shift_rows_rev(&mut decrypted);
        sub_bytes_rev(&mut decrypted, &rsbox);

        i -= 1;
    }

    //
    // final round
    //
    add_round_key(&mut decrypted, &keys[0]);

    decrypted
}

#[cfg(test)]
mod tests {
    use crate::utils::{key_schedule, sub_bytes};
    use super::*;

    #[test]
    fn test_reverse_sbox() {
       const RSBOX_OG: [u8; 256] = [
            0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
            0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,
            0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
            0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,
            0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,
            0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
            0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,
            0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,
            0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,
            0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,
            0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,
            0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,
            0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,
            0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,
            0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,
            0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d
        ];

        const RSBOX: [u8; 256] = calculate_rsbox();

        assert_eq!(RSBOX_OG, RSBOX);
    }

    #[test]
    fn test_rev_shift_rows() {
        let mut block = [
            0x00, 0x05, 0x0A, 0x0F,
            0x04, 0x09, 0x0E, 0x03,
            0x08, 0x0D, 0x02, 0x07,
            0x0C, 0x01, 0x06, 0x0B
        ];

        let expected = [
            0x00, 0x01, 0x02, 0x03,
            0x04, 0x05, 0x06, 0x07,
            0x08, 0x09, 0x0A, 0x0B,
            0x0C, 0x0D, 0x0E, 0x0F
        ];

        shift_rows_rev(&mut block);
        assert_eq!(block, expected);
    }

    #[test]
    fn test_rev_mix_columns() {
        let mut block = [
            0x8e, 0x4d, 0xa1, 0xbc,
            0x9f, 0xdc, 0x58, 0x9d,
            0x01, 0x01, 0x01, 0x01,
            0xc6, 0xc6, 0xc6, 0xc6
        ];

        let expected = [
            0xdb, 0x13, 0x53, 0x45,
            0xf2, 0x0a, 0x22, 0x5c,
            0x01, 0x01, 0x01, 0x01,
            0xc6, 0xc6, 0xc6, 0xc6
        ];

        mix_columns_rev(&mut block);
        assert_eq!(block, expected);
    }

    #[test]
    fn test_rev_sub_bytes(){
        let mut block = [
            0xfe, 0xd7, 0xab, 0x76,
            0x30, 0x01, 0x67, 0x2b,
            0xf2, 0x6b, 0x6f, 0xc5,
            0x63, 0x7c, 0x77, 0x7b
        ];

        let expected = [
            0x0c, 0x0d, 0x0e, 0x0f,
            0x08, 0x09, 0x0a, 0x0b,
            0x04, 0x05, 0x06, 0x07,
            0x00, 0x01, 0x02, 0x03
        ];

        const RSBOX: [u8; 256] = calculate_rsbox();

        sub_bytes(&mut block, &RSBOX);
        assert_eq!(block, expected);
    }

    #[test]
    fn test_decrypt_block(){
        const KEY: [u8; 16] = [
            0x2b, 0x7e, 0x15, 0x16,
            0x28, 0xae, 0xd2, 0xa6,
            0xab, 0xf7, 0x15, 0x88,
            0x09, 0xcf, 0x4f, 0x3c
        ];

        const BLOCK: [u8; 16] = [
            0x39, 0x25, 0x84, 0x1d,
            0x02, 0xdc, 0x09, 0xfb,
            0xdc, 0x11, 0x85, 0x97,
            0x19, 0x6a, 0x0b, 0x32
        ];

        const EXPECTED: [u8; 16] = [
            0x32, 0x43, 0xf6, 0xa8,
            0x88, 0x5a, 0x30, 0x8d,
            0x31, 0x31, 0x98, 0xa2,
            0xe0, 0x37, 0x07, 0x34
        ];

        const ROUND_KEYS: [[u8; 16]; 11] = key_schedule(&KEY);

        const DECRYPTED_BLOCK: [u8; 16] = decrypt_block(&BLOCK, &ROUND_KEYS);

        assert_eq!(DECRYPTED_BLOCK, EXPECTED);
    }
}

